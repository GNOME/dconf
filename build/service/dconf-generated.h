/*
 * Generated by gdbus-codegen 2.56.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __DCONF_GENERATED_H__
#define __DCONF_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for ca.desrt.dconf.Writer */

#define DCONF_DBUS_TYPE_WRITER (dconf_dbus_writer_get_type ())
#define DCONF_DBUS_WRITER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DCONF_DBUS_TYPE_WRITER, DConfDBusWriter))
#define DCONF_DBUS_IS_WRITER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DCONF_DBUS_TYPE_WRITER))
#define DCONF_DBUS_WRITER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DCONF_DBUS_TYPE_WRITER, DConfDBusWriterIface))

struct _DConfDBusWriter;
typedef struct _DConfDBusWriter DConfDBusWriter;
typedef struct _DConfDBusWriterIface DConfDBusWriterIface;

struct _DConfDBusWriterIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_change) (
    DConfDBusWriter *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_blob);

  gboolean (*handle_init) (
    DConfDBusWriter *object,
    GDBusMethodInvocation *invocation);

  void (*notify_signal) (
    DConfDBusWriter *object,
    const gchar *arg_prefix,
    const gchar *const *arg_changes,
    const gchar *arg_tag);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DConfDBusWriter, g_object_unref)
#endif

GType dconf_dbus_writer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dconf_dbus_writer_interface_info (void);
guint dconf_dbus_writer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dconf_dbus_writer_complete_init (
    DConfDBusWriter *object,
    GDBusMethodInvocation *invocation);

void dconf_dbus_writer_complete_change (
    DConfDBusWriter *object,
    GDBusMethodInvocation *invocation,
    const gchar *tag);



/* D-Bus signal emissions functions: */
void dconf_dbus_writer_emit_notify_signal (
    DConfDBusWriter *object,
    const gchar *arg_prefix,
    const gchar *const *arg_changes,
    const gchar *arg_tag);



/* D-Bus method calls: */
void dconf_dbus_writer_call_init (
    DConfDBusWriter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dconf_dbus_writer_call_init_finish (
    DConfDBusWriter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dconf_dbus_writer_call_init_sync (
    DConfDBusWriter *proxy,
    GCancellable *cancellable,
    GError **error);

void dconf_dbus_writer_call_change (
    DConfDBusWriter *proxy,
    GVariant *arg_blob,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dconf_dbus_writer_call_change_finish (
    DConfDBusWriter *proxy,
    gchar **out_tag,
    GAsyncResult *res,
    GError **error);

gboolean dconf_dbus_writer_call_change_sync (
    DConfDBusWriter *proxy,
    GVariant *arg_blob,
    gchar **out_tag,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DCONF_DBUS_TYPE_WRITER_PROXY (dconf_dbus_writer_proxy_get_type ())
#define DCONF_DBUS_WRITER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DCONF_DBUS_TYPE_WRITER_PROXY, DConfDBusWriterProxy))
#define DCONF_DBUS_WRITER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DCONF_DBUS_TYPE_WRITER_PROXY, DConfDBusWriterProxyClass))
#define DCONF_DBUS_WRITER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DCONF_DBUS_TYPE_WRITER_PROXY, DConfDBusWriterProxyClass))
#define DCONF_DBUS_IS_WRITER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DCONF_DBUS_TYPE_WRITER_PROXY))
#define DCONF_DBUS_IS_WRITER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DCONF_DBUS_TYPE_WRITER_PROXY))

typedef struct _DConfDBusWriterProxy DConfDBusWriterProxy;
typedef struct _DConfDBusWriterProxyClass DConfDBusWriterProxyClass;
typedef struct _DConfDBusWriterProxyPrivate DConfDBusWriterProxyPrivate;

struct _DConfDBusWriterProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DConfDBusWriterProxyPrivate *priv;
};

struct _DConfDBusWriterProxyClass
{
  GDBusProxyClass parent_class;
};

GType dconf_dbus_writer_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DConfDBusWriterProxy, g_object_unref)
#endif

void dconf_dbus_writer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DConfDBusWriter *dconf_dbus_writer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DConfDBusWriter *dconf_dbus_writer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dconf_dbus_writer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DConfDBusWriter *dconf_dbus_writer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DConfDBusWriter *dconf_dbus_writer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DCONF_DBUS_TYPE_WRITER_SKELETON (dconf_dbus_writer_skeleton_get_type ())
#define DCONF_DBUS_WRITER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DCONF_DBUS_TYPE_WRITER_SKELETON, DConfDBusWriterSkeleton))
#define DCONF_DBUS_WRITER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DCONF_DBUS_TYPE_WRITER_SKELETON, DConfDBusWriterSkeletonClass))
#define DCONF_DBUS_WRITER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DCONF_DBUS_TYPE_WRITER_SKELETON, DConfDBusWriterSkeletonClass))
#define DCONF_DBUS_IS_WRITER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DCONF_DBUS_TYPE_WRITER_SKELETON))
#define DCONF_DBUS_IS_WRITER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DCONF_DBUS_TYPE_WRITER_SKELETON))

typedef struct _DConfDBusWriterSkeleton DConfDBusWriterSkeleton;
typedef struct _DConfDBusWriterSkeletonClass DConfDBusWriterSkeletonClass;
typedef struct _DConfDBusWriterSkeletonPrivate DConfDBusWriterSkeletonPrivate;

struct _DConfDBusWriterSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DConfDBusWriterSkeletonPrivate *priv;
};

struct _DConfDBusWriterSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dconf_dbus_writer_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DConfDBusWriterSkeleton, g_object_unref)
#endif

DConfDBusWriter *dconf_dbus_writer_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for ca.desrt.dconf.ServiceInfo */

#define DCONF_DBUS_TYPE_SERVICE_INFO (dconf_dbus_service_info_get_type ())
#define DCONF_DBUS_SERVICE_INFO(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DCONF_DBUS_TYPE_SERVICE_INFO, DConfDBusServiceInfo))
#define DCONF_DBUS_IS_SERVICE_INFO(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DCONF_DBUS_TYPE_SERVICE_INFO))
#define DCONF_DBUS_SERVICE_INFO_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DCONF_DBUS_TYPE_SERVICE_INFO, DConfDBusServiceInfoIface))

struct _DConfDBusServiceInfo;
typedef struct _DConfDBusServiceInfo DConfDBusServiceInfo;
typedef struct _DConfDBusServiceInfoIface DConfDBusServiceInfoIface;

struct _DConfDBusServiceInfoIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_blame) (
    DConfDBusServiceInfo *object,
    GDBusMethodInvocation *invocation);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DConfDBusServiceInfo, g_object_unref)
#endif

GType dconf_dbus_service_info_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dconf_dbus_service_info_interface_info (void);
guint dconf_dbus_service_info_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dconf_dbus_service_info_complete_blame (
    DConfDBusServiceInfo *object,
    GDBusMethodInvocation *invocation,
    const gchar *blame);



/* D-Bus method calls: */
void dconf_dbus_service_info_call_blame (
    DConfDBusServiceInfo *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dconf_dbus_service_info_call_blame_finish (
    DConfDBusServiceInfo *proxy,
    gchar **out_blame,
    GAsyncResult *res,
    GError **error);

gboolean dconf_dbus_service_info_call_blame_sync (
    DConfDBusServiceInfo *proxy,
    gchar **out_blame,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DCONF_DBUS_TYPE_SERVICE_INFO_PROXY (dconf_dbus_service_info_proxy_get_type ())
#define DCONF_DBUS_SERVICE_INFO_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DCONF_DBUS_TYPE_SERVICE_INFO_PROXY, DConfDBusServiceInfoProxy))
#define DCONF_DBUS_SERVICE_INFO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DCONF_DBUS_TYPE_SERVICE_INFO_PROXY, DConfDBusServiceInfoProxyClass))
#define DCONF_DBUS_SERVICE_INFO_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DCONF_DBUS_TYPE_SERVICE_INFO_PROXY, DConfDBusServiceInfoProxyClass))
#define DCONF_DBUS_IS_SERVICE_INFO_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DCONF_DBUS_TYPE_SERVICE_INFO_PROXY))
#define DCONF_DBUS_IS_SERVICE_INFO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DCONF_DBUS_TYPE_SERVICE_INFO_PROXY))

typedef struct _DConfDBusServiceInfoProxy DConfDBusServiceInfoProxy;
typedef struct _DConfDBusServiceInfoProxyClass DConfDBusServiceInfoProxyClass;
typedef struct _DConfDBusServiceInfoProxyPrivate DConfDBusServiceInfoProxyPrivate;

struct _DConfDBusServiceInfoProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DConfDBusServiceInfoProxyPrivate *priv;
};

struct _DConfDBusServiceInfoProxyClass
{
  GDBusProxyClass parent_class;
};

GType dconf_dbus_service_info_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DConfDBusServiceInfoProxy, g_object_unref)
#endif

void dconf_dbus_service_info_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DConfDBusServiceInfo *dconf_dbus_service_info_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DConfDBusServiceInfo *dconf_dbus_service_info_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dconf_dbus_service_info_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DConfDBusServiceInfo *dconf_dbus_service_info_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DConfDBusServiceInfo *dconf_dbus_service_info_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DCONF_DBUS_TYPE_SERVICE_INFO_SKELETON (dconf_dbus_service_info_skeleton_get_type ())
#define DCONF_DBUS_SERVICE_INFO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DCONF_DBUS_TYPE_SERVICE_INFO_SKELETON, DConfDBusServiceInfoSkeleton))
#define DCONF_DBUS_SERVICE_INFO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DCONF_DBUS_TYPE_SERVICE_INFO_SKELETON, DConfDBusServiceInfoSkeletonClass))
#define DCONF_DBUS_SERVICE_INFO_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DCONF_DBUS_TYPE_SERVICE_INFO_SKELETON, DConfDBusServiceInfoSkeletonClass))
#define DCONF_DBUS_IS_SERVICE_INFO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DCONF_DBUS_TYPE_SERVICE_INFO_SKELETON))
#define DCONF_DBUS_IS_SERVICE_INFO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DCONF_DBUS_TYPE_SERVICE_INFO_SKELETON))

typedef struct _DConfDBusServiceInfoSkeleton DConfDBusServiceInfoSkeleton;
typedef struct _DConfDBusServiceInfoSkeletonClass DConfDBusServiceInfoSkeletonClass;
typedef struct _DConfDBusServiceInfoSkeletonPrivate DConfDBusServiceInfoSkeletonPrivate;

struct _DConfDBusServiceInfoSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DConfDBusServiceInfoSkeletonPrivate *priv;
};

struct _DConfDBusServiceInfoSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dconf_dbus_service_info_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DConfDBusServiceInfoSkeleton, g_object_unref)
#endif

DConfDBusServiceInfo *dconf_dbus_service_info_skeleton_new (void);


G_END_DECLS

#endif /* __DCONF_GENERATED_H__ */
