/* dconf.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "DConf", lower_case_cprefix = "dconf_")]
namespace DConf {
	[CCode (cheader_filename = "dconf.h")]
	public class Client : GLib.Object {
		[CCode (has_construct_function = false)]
		public Client (string context, bool can_write, DConf.WatchFunc? watch_func, GLib.DestroyNotify? notify);
		public bool is_writable (string prefix) throws GLib.Error;
		[CCode (array_length_type = "gsize")]
		public string[] list (string prefix);
		public GLib.Variant read (string key);
		public bool set_locked (string path, bool locked, GLib.Cancellable cancellable) throws GLib.Error;
		public async bool set_locked_async (string path, bool locked, GLib.Cancellable cancellable) throws GLib.Error;
		public bool set_locked_finish (GLib.AsyncResult _result) throws GLib.Error;
		public bool unwatch (string name) throws GLib.Error;
		public async bool unwatch_async (string name);
		public bool unwatch_finish (GLib.AsyncResult _result);
		public bool watch (string name) throws GLib.Error;
		public async bool watch_async (string name);
		public bool watch_finish (GLib.AsyncResult _result);
		public bool write (string key, GLib.Variant value, uint64 sequence, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool write_async (string key, GLib.Variant value, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool write_finish (GLib.AsyncResult _result, uint64 sequence) throws GLib.Error;
		public bool write_many (string prefix, string keys, out unowned GLib.Variant values, uint64 sequence, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool write_many_async (string prefix, string keys, out unowned GLib.Variant values, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool write_many_finish (GLib.AsyncResult _result, uint64 sequence) throws GLib.Error;
	}
	[CCode (cheader_filename = "dconf.h")]
	public delegate void WatchFunc (DConf.Client client, string path, string items);
	[CCode (cheader_filename = "dconf.h")]
	public static bool is_dir (string str);
	[CCode (cheader_filename = "dconf.h")]
	public static bool is_key (string str);
	[CCode (cheader_filename = "dconf.h")]
	public static bool is_path (string str);
	[CCode (cheader_filename = "dconf.h")]
	public static bool is_rel (string str);
	[CCode (cheader_filename = "dconf.h")]
	public static bool is_rel_dir (string str);
	[CCode (cheader_filename = "dconf.h")]
	public static bool is_rel_key (string str);
}
